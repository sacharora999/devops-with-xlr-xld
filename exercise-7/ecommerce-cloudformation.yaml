AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ResourceNamePrefix:
    Type: String
    Default: ecommerce

Resources:
  # VPC
  ecommerceVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'false'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub "${ResourceNamePrefix}-vpc"
  ecommerceInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${ResourceNamePrefix}-igw"
  ecommerceAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ecommerceVPC
      InternetGatewayId: !Ref ecommerceInternetGateway

  ecommerceSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref ecommerceVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone:
        Fn::Select:
        - '0'
        - !GetAZs
      Tags:
      - Key: Name
        Value: !Sub "${ResourceNamePrefix}-subnet-a"
  ecommerceSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ecommerceVPC
      Tags:
      - Key: Name
        Value: !Sub "${ResourceNamePrefix}-routetable-a"
      - Key: Network
        Value: Private
  ecommerceSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ecommerceSubnetARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ecommerceInternetGateway
  ecommerceSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ecommerceSubnetA
      RouteTableId: !Ref ecommerceSubnetARouteTable

  ecommerceSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref ecommerceVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
        - '1'
        - !GetAZs
      Tags:
      - Key: Name
        Value: !Sub "${ResourceNamePrefix}-subnet-b"
  ecommerceSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ecommerceVPC
      Tags:
      - Key: Name
        Value: !Sub "${ResourceNamePrefix}-routetable-b"
      - Key: Network
        Value: Private
  ecommerceSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ecommerceSubnetBRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ecommerceInternetGateway
  ecommerceSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ecommerceSubnetB
      RouteTableId: !Ref ecommerceSubnetBRouteTable

  # Security
  ecommerceEcsExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${ResourceNamePrefix}-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  ecommerceEcsExecutionPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn:
     - ecommerceEcsExecutionRole
     - ecommerceLogGroup
    Properties:
      PolicyName: !Sub "${ResourceNamePrefix}-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        # LogStream Persmissions
          -
            Effect: "Allow"
            Action:
             - "logs:PutLogEvents"
             - "logs:CreateLogStream"
            Resource: !GetAtt ecommerceLogGroup.Arn
          - Effect: "Allow"
            Action:
             - "ssm:GetParameter"
             - "ssm:GetParametersByPath"
            Resource: !Join ['', ['arn:aws:ssm:',!Ref 'AWS::Region',':', !Ref 'AWS::AccountId', ':parameter/', !Ref 'AWS::StackName','/*' ]]
      Roles:
        - !Ref ecommerceEcsExecutionRole
  ecommerceInternalSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Internal e-Commerce Monolith Container Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 10.0.0.0/16
      VpcId: !Ref ecommerceVPC
      Tags:
      - Key: Name
        Value: !Sub "${ResourceNamePrefix}-internal-securitygroup"
  ecommerceInternetSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: External e-Commerce Monolith Container Security Group for ALB
      VpcId: !Ref ecommerceVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        DestinationSecurityGroupId: !Ref ecommerceInternalSG
      Tags:
      - Key: Name
        Value: !Sub "${ResourceNamePrefix}-internet-securitygroup"
  ecommerceLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/${ResourceNamePrefix}"
      RetentionInDays: 7

  # Load balancer
  ecommerceLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub "${ResourceNamePrefix}-lb"
      Scheme: internet-facing
      Type: application
      Subnets:
      - !Ref ecommerceSubnetA
      - !Ref ecommerceSubnetB
      SecurityGroups:
      - !Ref ecommerceInternetSG
  ecommerceALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub "${ResourceNamePrefix}-targetgroup"
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref ecommerceVPC
      HealthCheckIntervalSeconds: 120
      HealthCheckTimeoutSeconds: 60
      HealthCheckPath: '/management/health'
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '5'
  ecommerceALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ecommerceALBTargetGroup
      LoadBalancerArn: !Ref ecommerceLoadBalancer
      Port: '80'
      Protocol: HTTP

  # ECS
  ecommerceCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub "${ResourceNamePrefix}-ecs-cluster"

Outputs:
  ECSExecutionRoleArn:
    Description: ARN of the ECS execution role to use
    Value: !GetAtt ecommerceEcsExecutionRole.Arn
  ECSClusterName:
    Description: Name of the ECS Cluster'
    Value: !Sub "${ResourceNamePrefix}-ecs-cluster"
  ECSClusterArn:
    Description: Name of the ECS Cluster'
    Value: !GetAtt ecommerceCluster.Arn
  LoadBalancerDNSName:
    Description: The external DNS address of the load-balanancer
    Value: !GetAtt ecommerceLoadBalancer.DNSName
